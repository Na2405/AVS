bb sort
<table><tr> <td>for (int i = 0; i < array.length - 1; i++) {</td></tr><tr> <td>&emsp;&emsp;for (int j = 0; j < array.length - i - 1; j++) {</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;int temp = array[i];</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;array[i] = array[j];</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;array[j] = temp;</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;}</td></tr><tr> <td>&emsp;&emsp;}</td></tr><tr> <td>}</td></tr></table>
Selection sort
<table><tr><td>for (int i = 0; i < array.length - 1; i++)  {</td></tr><tr><td>&emsp;&emsp;int index = i;</td></tr><tr><td>&emsp;&emsp;for (int j = i + 1; j < array.length; j++){</td></tr><tr><td>&emsp;&emsp;&emsp;&emsp;if (array[j] < array[index]){</td></tr><tr><td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;index = j;  </td></tr><tr><td>&emsp;&emsp;&emsp;&emsp;}</td></tr><tr><td>&emsp;&emsp;}</td></tr><tr> <td>&emsp;&emsp;int smallerNumber = array[index];</td></tr><tr> <td>&emsp;&emsp;array[index] = array[i];</td></tr><tr> <td>&emsp;&emsp;array[i] = smallerNumber; </td></tr><tr> <td>}</td></tr></table>
insertion sort
<table><tr> <td>for (int i = 1; i < arr.length; ++i) {</td></tr><tr> <td>&emsp;&emsp;int key = arr[i];</td></tr><tr> <td>&emsp;&emsp;int j = i - 1;</td></tr><tr> <td>&emsp;&emsp;while (j >= 0 && arr[j] > key) {</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;arr[j + 1] = arr[j];</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;j = j - 1;</td></tr><tr> <td>&emsp;&emsp;}</td></tr><tr> <td>&emsp;&emsp;arr[j + 1] = key;</td></tr><tr> <td>}</td></tr></table>
Linear search
<table><tr>  <td>for(int i = 0; i < array.length; i++) {</td></tr><tr>  <td>&emsp;&emsp;if(array[i] == x) {</td></tr><tr>  <td>&emsp;&emsp;&emsp;&emsp;return i;</td></tr><tr>  <td>&emsp;&emsp;} </td></tr><tr>  <td>}</td></tr><tr>  <td>return -1;</td></tr></table>
Binary search
<table><tr> <td>int binarySearch(int arr[], int left, int right, int x) { </td></tr><tr> <td>&emsp;&emsp;if (right >= left) {</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;int mid = left + (right - l) / 2; </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;if (arr[mid] == x) {</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;return mid; </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;}</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;if (arr[mid] > x) {</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;return binarySearch(arr, left, mid - 1, x);</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;}</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;return binarySearch(arr, mid + left, right, x);</td></tr><tr> <td>&emsp;&emsp;} </td></tr><tr> <td>&emsp;&emsp;return -1;</td></tr><tr> <td>}</td></tr></table>
iter search
<table><tr> <td>int interpolationSearch(int arr[], int x){ </td></tr><tr> <td>&emsp;&emsp;int lo = 0, hi = (arr.length - 1); </td></tr><tr> <td>&emsp;&emsp;while (lo <= hi && x >= arr[lo] && x <= arr[hi]){ </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;if (lo == hi){ </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;if (arr[lo] == x) {</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;return lo; </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;{</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;return -1; </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;} </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;int pos = lo + (((hi - lo) / </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;(arr[hi] - arr[lo])) * (x - arr[lo])); </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;if (arr[pos] == x){ </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;return pos; </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;}</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;if (arr[pos] < x){</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;lo = pos + 1; </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;} else{</td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;hi = pos - 1; </td></tr><tr> <td>&emsp;&emsp;&emsp;&emsp;}</td></tr><tr> <td>&emsp;&emsp;} </td></tr><tr> <td>&emsp;&emsp;return -1; </td></tr><tr> <td>}</td></tr></table>


